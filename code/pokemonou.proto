syntax = 'proto3';

package pokemonou;

service Pokemonou {
    rpc check_board (name) returns (check_position) {}
    rpc move (move_position) returns (complete_move) {}
    rpc list_pokemon (name) returns (captured_pokemon) {}
    rpc list_trainer (name) returns (trainer_info) {}
    rpc path (name) returns (path_info) {}
}

message name {
    string hostname = 1;
}

// x = [-1, 0, 1], -1 : can't move, 0 : can move, 1 : can move and capture
// lock = "hostname", hostname of the trainer who locked the position
// alive = [0, 1], 0 : dead, 1 : alive
// pokemon_left = number of pokemon left on the board
// current_position = [x, y], current position of the trainer/pokemon
message check_position {
    repeated int32 x = 1;
    string lock = 2;
    int32 alive = 3;
    int32 pokemon_left = 4;
    repeated int32 current_position = 5;
}

// [x, y] = the position that trainer/pokemon want to move to
// hostname = name of trainer/pokemon
// toCapture = [0, 1], 0 : don't capture, 1 : capture for trainer only
message move_position {
    int32 cur_x = 1;
    int32 cur_y = 2;
    int32 newx = 3;
    int32 newy = 4;
    string hostname = 5;
    int32 toCapture = 6;
}

// success = [0, 1], 0 : fail, 1 : success
message complete_move {
    int32 success = 1;
}

// pokemon_name = list of pokemons that the trainer captured
message captured_pokemon {
    repeated string pokemon_name = 1;
}

// trainer_name = name of trainer that captured the pokemon
message trainer_info{
    string trainer_name = 1;
    repeated int32 pos = 2;
}

// path = list of positions that the trainer has been to
message path_info{
    string pos = 1;
}